import networkx as nx

#create graph
G=nx.Graph()

#add edges
G.add_edge(1,2,weight=479)
G.add_edge(3,4,weight=389)
G.add_edge(5,4,weight=330)
G.add_edge(6,7,weight=425)
G.add_edge(8,6,weight=278)
G.add_edge(9,10,weight=198)
G.add_edge(11,9,weight=243)
G.add_edge(12,13,weight=904)
G.add_edge(14,15,weight=748)
G.add_edge(10,16,weight=861)
G.add_edge(17,18,weight=233)
G.add_edge(19,20,weight=304)
G.add_edge(21,22,weight=471)
G.add_edge(23,24,weight=274)
G.add_edge(18,25,weight=443)
G.add_edge(26,27,weight=323)
G.add_edge(28,29,weight=408)
G.add_edge(30,5,weight=475)
G.add_edge(31,32,weight=856)
G.add_edge(4,33,weight=157)
G.add_edge(34,20,weight=688)
G.add_edge(35,36,weight=781)
G.add_edge(20,35,weight=315)
G.add_edge(28,37,weight=57)
G.add_edge(9,38,weight=25)
G.add_edge(39,40,weight=104)
G.add_edge(41,42,weight=874)
G.add_edge(43,44,weight=361)
G.add_edge(45,46,weight=76)
G.add_edge(47,43,weight=167)
G.add_edge(48,49,weight=337)
G.add_edge(36,132,weight=303)
G.add_edge(50,38,weight=184)
G.add_edge(45,51,weight=2888)
G.add_edge(52,51,weight=212)
G.add_edge(53,54,weight=61)
G.add_edge(55,37,weight=1089)
G.add_edge(53,56,weight=875)
G.add_edge(83,100,weight=478)
G.add_edge(49,57,weight=1223)
G.add_edge(58,59,weight=219)
G.add_edge(42,60,weight=1622)
G.add_edge(61,55,weight=791)
G.add_edge(62,63,weight=421)
G.add_edge(64,50,weight=826)
G.add_edge(65,49,weight=613)
G.add_edge(37,1,weight=606)
G.add_edge(38,6,weight=217)
G.add_edge(40,66,weight=1214)
G.add_edge(34,45,weight=92)
G.add_edge(67,63,weight=543)
G.add_edge(68,61,weight=121)
G.add_edge(18,26,weight=2197)
G.add_edge(69,70,weight=237)
G.add_edge(46,62,weight=321)
G.add_edge(20,60,weight=187)
G.add_edge(52,58,weight=30)
G.add_edge(71,1,weight=312)
G.add_edge(63,71,weight=260)
G.add_edge(72,53,weight=841)
G.add_edge(73,62,weight=56)
G.add_edge(20,34,weight=685)
G.add_edge(74,75,weight=206)
G.add_edge(75,76,weight=270)
G.add_edge(34,46,weight=149)
G.add_edge(54,52,weight=1617)
G.add_edge(77,78,weight=582)
G.add_edge(52,79,weight=113)
G.add_edge(74,29,weight=299)
G.add_edge(80,81,weight=295)
G.add_edge(29,8,weight=606)
G.add_edge(19,34,weight=654)
G.add_edge(69,82,weight=298)
G.add_edge(73,76,weight=325)
G.add_edge(72,54,weight=800)
G.add_edge(76,34,weight=152)
G.add_edge(46,83,weight=299)
G.add_edge(80,23,weight=247)
G.add_edge(84,85,weight=216)
G.add_edge(29,73,weight=342)
G.add_edge(86,31,weight=337)
G.add_edge(87,69,weight=529)
G.add_edge(63,73,weight=447)
G.add_edge(88,89,weight=139)
G.add_edge(32,90,weight=477)
G.add_edge(22,90,weight=324)
G.add_edge(91,77,weight=1108)
G.add_edge(92,93,weight=132)
G.add_edge(24,94,weight=572)
G.add_edge(95,54,weight=421)
G.add_edge(96,97,weight=853)
G.add_edge(98,95,weight=298)
G.add_edge(87,82,weight=657)
G.add_edge(12,95,weight=219)
G.add_edge(78,99,weight=208)
G.add_edge(67,100,weight=286)
G.add_edge(101,89,weight=238)
G.add_edge(94,102,weight=1789)
G.add_edge(100,63,weight=262)
G.add_edge(103,69,weight=336)
G.add_edge(104,68,weight=854)
G.add_edge(42,77,weight=82)
G.add_edge(104,17,weight=151)
G.add_edge(27,105,weight=791)
G.add_edge(106,107,weight=323)
G.add_edge(108,109,weight=993)
G.add_edge(131,85,weight=420)
G.add_edge(85,84,weight=365)
G.add_edge(110,31,weight=597)
G.add_edge(27,111,weight=297)
G.add_edge(112,113,weight=196)
G.add_edge(83,114,weight=313)
G.add_edge(6,9,weight=219)
G.add_edge(108,14,weight=557)
G.add_edge(68,25,weight=1085)
G.add_edge(105,115,weight=325)
G.add_edge(4,84,weight=118)
G.add_edge(114,67,weight=684)
G.add_edge(11,116,weight=1160)
G.add_edge(117,112,weight=552)
G.add_edge(118,102,weight=360)
G.add_edge(21,32,weight=379)
G.add_edge(119,120,weight=620)
G.add_edge(121,86,weight=583)
G.add_edge(122,90,weight=130)
G.add_edge(123,11,weight=124)
G.add_edge(42,119,weight=220)
G.add_edge(108,123,weight=322)
G.add_edge(86,124,weight=268)
G.add_edge(124,21,weight=587)
G.add_edge(125,23,weight=118)
G.add_edge(109,116,weight=265)
G.add_edge(126,107,weight=862)
G.add_edge(116,88,weight=214)
G.add_edge(91,127,weight=295)
G.add_edge(26,128,weight=674)
G.add_edge(36,103,weight=1131)
G.add_edge(125,79,weight=354)
G.add_edge(94,92,weight=666)
G.add_edge(78,18,weight=356)
G.add_edge(80,24,weight=131)
G.add_edge(82,22,weight=367)
G.add_edge(122,33,weight=342)
G.add_edge(129,88,weight=132)
G.add_edge(33,69,weight=671)
G.add_edge(130,101,weight=588)
G.add_edge(107,97,weight=325)
G.add_edge(30,131,weight=663)
G.add_edge(15,109,weight=361)
G.add_edge(127,104,weight=503)
G.add_edge(83,62,weight=148)
G.add_edge(13,72,weight=347)
G.add_edge(85,70,weight=332)
G.add_edge(76,46,weight=39)
G.add_edge(130,106,weight=756)
G.add_edge(55,40,weight=267)
G.add_edge(101,129,weight=129)
G.add_edge(132,39,weight=131)
G.add_edge(133,91,weight=173)
G.add_edge(36,133,weight=163)
G.add_edge(134,91,weight=507)
G.add_edge(135,42,weight=885)
G.add_edge(35,134,weight=349)
G.add_edge(133,136,weight=0)
G.add_edge(127,136,weight=0)
G.add_edge(134,137,weight=0)
G.add_edge(135,137,weight=0)
G.add_edge(17,138,weight=266)
G.add_edge(126,21,weight=859)
G.add_edge(52,125,weight=387)
G.add_edge(20,135,weight=817)
G.add_edge(13,67,weight=678)
G.add_edge(47,139,weight=273)
G.add_edge(10,50,weight=28)
G.add_edge(25,140,weight=663)
G.add_edge(89,106,weight=356)
G.add_edge(67,13,weight=606)
G.add_edge(51,141,weight=527)
G.add_edge(6,1,weight=121)
G.add_edge(97,121,weight=342)
G.add_edge(71,67,weight=970)
G.add_edge(96,124,weight=341)
G.add_edge(114,12,weight=328)
G.add_edge(105,65,weight=172)
G.add_edge(103,112,weight=119)
G.add_edge(71,8,weight=130)
G.add_edge(113,15,weight=184)
G.add_edge(142,130,weight=260)
G.add_edge(63,71,weight=240)
G.add_edge(121,110,weight=213)
G.add_edge(102,19,weight=462)
G.add_edge(117,113,weight=474)
G.add_edge(14,117,weight=431)
G.add_edge(70,143,weight=101)
G.add_edge(75,28,weight=1329)
G.add_edge(142,10,weight=59)
G.add_edge(116,126,weight=333)
G.add_edge(66,45,weight=41)
G.add_edge(119,99,weight=587)
G.add_edge(126,87,weight=473)
G.add_edge(11,142,weight=99)
G.add_edge(126,96,weight=329)
G.add_edge(33,22,weight=67)
G.add_edge(144,47,weight=2237)
G.add_edge(56,58,weight=711)
G.add_edge(24,92,weight=248)
G.add_edge(57,61,weight=376)
G.add_edge(51,145,weight=1208)
G.add_edge(60,144,weight=572)
G.add_edge(145,43,weight=95)
G.add_edge(72,13,weight=390)

#add intersection info to nodes
G.node[42]['intersection'] = 'Trail / 32ND ST W'
G.node[63]['intersection'] = 'Trail / DEAN PKWY'
G.node[4]['intersection'] = 'FRANCE AVE S / HIGHWAY 7'
G.node[5]['intersection'] = 'HIGHWAY 7 / GLENHURST AVE S'
G.node[6]['intersection'] = 'BURNHAM RD / CEDAR LAKE AVE'
G.node[8]['intersection'] = 'CEDAR LAKE AVE / XERXES AVE S'
G.node[9]['intersection'] = 'CEDAR LAKE AVE / SUNSET BLVD'
G.node[10]['intersection'] = 'CEDAR LAKE AVE / CEDAR LAKE PKWY'
G.node[11]['intersection'] = 'SUNSET BLVD / DEPOT ST'
G.node[12]['intersection'] = 'THOMAS AVE S / 28TH ST W'
G.node[13]['intersection'] = 'THOMAS AVE S / DEAN PKWY'
G.node[14]['intersection'] = '29TH ST W / SAINT LOUIS AVE'
G.node[15]['intersection'] = '29TH ST W / CHOWEN AVE S'
G.node[17]['intersection'] = 'EXCELSIOR BLVD / LIST PL'
G.node[18]['intersection'] = 'EXCELSIOR BLVD / 32ND ST W'
G.node[19]['intersection'] = 'LAKE ST W / DEAN PKWY'
G.node[20]['intersection'] = 'LAKE ST W / DEAN PKWY'
G.node[21]['intersection'] = 'FRANCE AVE S / SUNSET BLVD'
G.node[22]['intersection'] = 'FRANCE AVE S / MINNETONKA BLVD'
G.node[23]['intersection'] = 'CALHOUN PKWY E / KNOX AVE S'
G.node[24]['intersection'] = 'CALHOUN PKWY E / LAKE ST W'
G.node[25]['intersection'] = '32ND ST W / CHOWEN AVE S'
G.node[26]['intersection'] = 'FRANCE AVE S / EXCELSIOR BLVD'
G.node[27]['intersection'] = 'FRANCE AVE S / 34TH ST W'
G.node[28]['intersection'] = '28TH ST W / Trail'
G.node[29]['intersection'] = '28TH ST W / XERXES AVE S'
G.node[30]['intersection'] = 'GLENHURST AVE S / 31ST ST W'
G.node[31]['intersection'] = 'GLENHURST AVE S / 28TH ST W'
G.node[32]['intersection'] = 'GLENHURST AVE S / SUNSET BLVD'
G.node[33]['intersection'] = 'FRANCE AVE S / COUNTY ROAD 25'
G.node[34]['intersection'] = 'DEAN PKWY / Trail'
G.node[35]['intersection'] = 'LAKE ST W / EXCELSIOR BLVD'
G.node[36]['intersection'] = 'LAKE ST W / MARKET PLZ'
G.node[46]['intersection'] = 'Trail / DEAN PKWY'
G.node[52]['intersection'] = 'Trail / 28TH ST W'
G.node[54]['intersection'] = 'Trail / 28TH ST W'
G.node[65]['intersection'] = 'Trail / FRANCE AVE S'
G.node[67]['intersection'] = 'Trail / DEAN PKWY'
G.node[68]['intersection'] = 'Trail / ABBOTT AVE S'
G.node[69]['intersection'] = 'LAKE SHORE DR / LAKE ST W'
G.node[70]['intersection'] = 'LAKE SHORE DR / 30 1/2 ST W'
G.node[71]['intersection'] = 'Trail / BENTON BLVD'
G.node[72]['intersection'] = 'Trail / LAKE OF THE ISLES PKWY W'
G.node[73]['intersection'] = 'Trail / DEAN PKWY'
G.node[74]['intersection'] = '29TH ST W / XERXES AVE S'
G.node[75]['intersection'] = '29TH ST W / DEAN CT'
G.node[76]['intersection'] = '29TH ST W / DEAN PKWY'
G.node[77]['intersection'] = '32ND ST W / CALHOUN BLVD W'
G.node[78]['intersection'] = '32ND ST W / ZENITH AVE S'
G.node[79]['intersection'] = '28TH ST W / LAKE OF THE ISLES PKWY E'
G.node[80]['intersection'] = 'KNOX AVE S / LAGOON AVE'
G.node[82]['intersection'] = 'LAKE ST W / EWING AVE S'
G.node[83]['intersection'] = 'DEAN PKWY / 28TH ST W'
G.node[84]['intersection'] = '30 1/2 ST W / 30 ST BUS TURNAROUND 1/2'
G.node[85]['intersection'] = '30 1/2 ST W / 30 ST BUS TURNAROUND 1/2'
G.node[86]['intersection'] = '28TH ST W / FRANCE AVE S'
G.node[87]['intersection'] = 'DREW AVE S / EWING AVE S'
G.node[88]['intersection'] = 'CHOWEN AVE S / 28TH ST W'
G.node[89]['intersection'] = 'CHOWEN AVE S / 28TH ST W'
G.node[90]['intersection'] = 'GLENHURST AVE S / MINNETONKA BLVD'
G.node[91]['intersection'] = 'CALHOUN BLVD W / EXCELSIOR BLVD'
G.node[92]['intersection'] = 'LAKE ST W / CALHOUN PKWY E'
G.node[95]['intersection'] = '28TH ST W / LAKE OF THE ISLES PKWY W'
G.node[96]['intersection'] = 'EWING AVE S / 28TH ST W'
G.node[97]['intersection'] = 'EWING AVE S / CEDAR LAKE AVE'
G.node[99]['intersection'] = 'ZENITH AVE S / IVY LN'
G.node[102]['intersection'] = 'LAKE ST W / THOMAS AVE S'
G.node[103]['intersection'] = 'LAKE ST W / CHOWEN AVE S'
G.node[104]['intersection'] = 'ABBOTT AVE S / EXCELSIOR BLVD'
G.node[105]['intersection'] = 'FRANCE AVE S / RANDALL AVE'
G.node[106]['intersection'] = 'CEDAR LAKE AVE / CHOWEN AVE S'
G.node[107]['intersection'] = 'CEDAR LAKE AVE / DREW AVE S'
G.node[108]['intersection'] = 'SAINT PAUL AVE / SAINT LOUIS AVE'
G.node[109]['intersection'] = 'SAINT PAUL AVE / CHOWEN AVE S'
G.node[110]['intersection'] = 'GLENHURST AVE S / CEDAR LAKE AVE'
G.node[112]['intersection'] = 'CHOWEN AVE S / SAINT LOUIS AVE'
G.node[113]['intersection'] = 'CHOWEN AVE S / CHOWEN PL'
G.node[114]['intersection'] = '28TH ST W / UPTON AVE S'
G.node[116]['intersection'] = 'SUNSET BLVD / CHOWEN AVE S'
G.node[117]['intersection'] = 'SAINT LOUIS AVE / CHOWEN PL'
G.node[119]['intersection'] = 'CALHOUN PKWY W / IVY LN'
G.node[121]['intersection'] = 'FRANCE AVE S / CEDAR LAKE AVE'
G.node[122]['intersection'] = 'GLENHURST AVE S / COUNTY ROAD 25'
G.node[123]['intersection'] = 'DEPOT ST / SAINT PAUL AVE'
G.node[124]['intersection'] = 'FRANCE AVE S / 28TH ST W'
G.node[126]['intersection'] = 'DREW AVE S / SUNSET BLVD'
G.node[130]['intersection'] = '28TH ST W / CEDAR LAKE AVE'
G.node[131]['intersection'] = '31ST ST W / EWING AVE S'
G.node[142]['intersection'] = 'CEDAR LAKE AVE / DEPOT ST'

#add destination info to nodes
nodes = [42,56,57,63,129,132,136,137,144,145]
paths = []
G.node[42]['destination'] = 'West Calhoun Parkway'
G.node[56]['destination'] = 'Lake of the Isles Park'
G.node[57]['destination'] = 'West Lake Station'
G.node[63]['destination'] = 'Dean Parkway and Cedar Lake Ave'
G.node[129]['destination'] = 'NW Residential neighborhood'
G.node[132]['destination'] = 'Calhoun Village Shopping Center'
G.node[136]['destination'] = 'Whole Foods Market'
G.node[137]['destination'] = 'Lake Calhoun Executive Center (Office building)'
G.node[144]['destination'] = 'Lake Calhoun North Beach'
G.node[145]['destination'] = 'Calhoun Yacht Club/Tin Fish Restaurant'
for o in nodes:
    for d in nodes:
        if not o == d:
            paths.append({'o':G.node[o]['destination'],'d':G.node[d]['destination'],'path':nx.shortest_path(G,o,d,weight='weight')})

#helper function to sum costs from graph
def sumCosts(graphNodes,graph):
    cost = 0
    for j, node in enumerate(graphNodes):
            try:
                cost = cost + graph.edge[node][graphNodes[j+1]]['weight']
            except:
                pass
    return cost

for p in paths:
    i = []
    for v in p['path']:
        if 'intersection' in G.node[v]:
            i.append(G.node[v]['intersection'])
    print(p['o'],p['d'],sumCosts(p['path'],G),', '.join(i))
